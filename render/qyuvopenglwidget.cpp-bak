#include "qyuvopenglwidget.h"

float vertices[] = {
    -0.5f, -0.5f, 0.0f,
     0.5f, -0.5f, 0.0f,
     0.0f,  0.5f, 0.0f
};

const char *vertexShaderSource = "layout (location = 0) in vec3 aPos; \
        void main() \
        {   \
            gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0); \
        }";

const char *fragmentShaderSource = "out vec4 FragColor; \
        void main() \
        { \
            FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f); \
        }";

QYUVOpenGLWidget::QYUVOpenGLWidget(QWidget *parent)
    : QOpenGLWidget(parent)
{

}

void QYUVOpenGLWidget::initializeGL()
{
    initializeOpenGLFunctions();
    glClearColor(255, 0, 0, 255);
    unsigned int VBO;
    glGenBuffers(1, &VBO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    unsigned int vertexShader;
    vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);

    unsigned int fragmentShader;
    fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    glCompileShader(fragmentShader);

    unsigned int shaderProgram;
    shaderProgram = glCreateProgram();

    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);

    glUseProgram(shaderProgram);
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);
}

void QYUVOpenGLWidget::resizeGL(int w, int h)
{

}

void QYUVOpenGLWidget::paintGL()
{
    glDrawArrays(GL_TRIANGLES, 0, 3);
}
